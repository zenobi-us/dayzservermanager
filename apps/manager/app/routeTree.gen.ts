/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/_dashboard'
import { Route as DashboardIndexImport } from './routes/_dashboard.index'
import { Route as DashboardServersImport } from './routes/_dashboard.servers'
import { Route as DashboardServersIndexImport } from './routes/_dashboard.servers.index'
import { Route as DashboardModsIndexImport } from './routes/_dashboard.mods.index'
import { Route as DashboardServersServerIdImport } from './routes/_dashboard.servers.$serverId'
import { Route as DashboardDemoDashboardImport } from './routes/_dashboard.demo.dashboard'
import { Route as DashboardServersServerIdModsImport } from './routes/_dashboard.servers.$serverId.mods'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardServersRoute = DashboardServersImport.update({
  id: '/servers',
  path: '/servers',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardServersIndexRoute = DashboardServersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardServersRoute,
} as any)

const DashboardModsIndexRoute = DashboardModsIndexImport.update({
  id: '/mods/',
  path: '/mods/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardServersServerIdRoute = DashboardServersServerIdImport.update({
  id: '/$serverId',
  path: '/$serverId',
  getParentRoute: () => DashboardServersRoute,
} as any)

const DashboardDemoDashboardRoute = DashboardDemoDashboardImport.update({
  id: '/demo/dashboard',
  path: '/demo/dashboard',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardServersServerIdModsRoute =
  DashboardServersServerIdModsImport.update({
    id: '/mods',
    path: '/mods',
    getParentRoute: () => DashboardServersServerIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard/servers': {
      id: '/_dashboard/servers'
      path: '/servers'
      fullPath: '/servers'
      preLoaderRoute: typeof DashboardServersImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/demo/dashboard': {
      id: '/_dashboard/demo/dashboard'
      path: '/demo/dashboard'
      fullPath: '/demo/dashboard'
      preLoaderRoute: typeof DashboardDemoDashboardImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/servers/$serverId': {
      id: '/_dashboard/servers/$serverId'
      path: '/$serverId'
      fullPath: '/servers/$serverId'
      preLoaderRoute: typeof DashboardServersServerIdImport
      parentRoute: typeof DashboardServersImport
    }
    '/_dashboard/mods/': {
      id: '/_dashboard/mods/'
      path: '/mods'
      fullPath: '/mods'
      preLoaderRoute: typeof DashboardModsIndexImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/servers/': {
      id: '/_dashboard/servers/'
      path: '/'
      fullPath: '/servers/'
      preLoaderRoute: typeof DashboardServersIndexImport
      parentRoute: typeof DashboardServersImport
    }
    '/_dashboard/servers/$serverId/mods': {
      id: '/_dashboard/servers/$serverId/mods'
      path: '/mods'
      fullPath: '/servers/$serverId/mods'
      preLoaderRoute: typeof DashboardServersServerIdModsImport
      parentRoute: typeof DashboardServersServerIdImport
    }
  }
}

// Create and export the route tree

interface DashboardServersServerIdRouteChildren {
  DashboardServersServerIdModsRoute: typeof DashboardServersServerIdModsRoute
}

const DashboardServersServerIdRouteChildren: DashboardServersServerIdRouteChildren =
  {
    DashboardServersServerIdModsRoute: DashboardServersServerIdModsRoute,
  }

const DashboardServersServerIdRouteWithChildren =
  DashboardServersServerIdRoute._addFileChildren(
    DashboardServersServerIdRouteChildren,
  )

interface DashboardServersRouteChildren {
  DashboardServersServerIdRoute: typeof DashboardServersServerIdRouteWithChildren
  DashboardServersIndexRoute: typeof DashboardServersIndexRoute
}

const DashboardServersRouteChildren: DashboardServersRouteChildren = {
  DashboardServersServerIdRoute: DashboardServersServerIdRouteWithChildren,
  DashboardServersIndexRoute: DashboardServersIndexRoute,
}

const DashboardServersRouteWithChildren =
  DashboardServersRoute._addFileChildren(DashboardServersRouteChildren)

interface DashboardRouteChildren {
  DashboardServersRoute: typeof DashboardServersRouteWithChildren
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardDemoDashboardRoute: typeof DashboardDemoDashboardRoute
  DashboardModsIndexRoute: typeof DashboardModsIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardServersRoute: DashboardServersRouteWithChildren,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardDemoDashboardRoute: DashboardDemoDashboardRoute,
  DashboardModsIndexRoute: DashboardModsIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof DashboardRouteWithChildren
  '/servers': typeof DashboardServersRouteWithChildren
  '/': typeof DashboardIndexRoute
  '/demo/dashboard': typeof DashboardDemoDashboardRoute
  '/servers/$serverId': typeof DashboardServersServerIdRouteWithChildren
  '/mods': typeof DashboardModsIndexRoute
  '/servers/': typeof DashboardServersIndexRoute
  '/servers/$serverId/mods': typeof DashboardServersServerIdModsRoute
}

export interface FileRoutesByTo {
  '/': typeof DashboardIndexRoute
  '/demo/dashboard': typeof DashboardDemoDashboardRoute
  '/servers/$serverId': typeof DashboardServersServerIdRouteWithChildren
  '/mods': typeof DashboardModsIndexRoute
  '/servers': typeof DashboardServersIndexRoute
  '/servers/$serverId/mods': typeof DashboardServersServerIdModsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_dashboard/servers': typeof DashboardServersRouteWithChildren
  '/_dashboard/': typeof DashboardIndexRoute
  '/_dashboard/demo/dashboard': typeof DashboardDemoDashboardRoute
  '/_dashboard/servers/$serverId': typeof DashboardServersServerIdRouteWithChildren
  '/_dashboard/mods/': typeof DashboardModsIndexRoute
  '/_dashboard/servers/': typeof DashboardServersIndexRoute
  '/_dashboard/servers/$serverId/mods': typeof DashboardServersServerIdModsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/servers'
    | '/'
    | '/demo/dashboard'
    | '/servers/$serverId'
    | '/mods'
    | '/servers/'
    | '/servers/$serverId/mods'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/demo/dashboard'
    | '/servers/$serverId'
    | '/mods'
    | '/servers'
    | '/servers/$serverId/mods'
  id:
    | '__root__'
    | '/_dashboard'
    | '/_dashboard/servers'
    | '/_dashboard/'
    | '/_dashboard/demo/dashboard'
    | '/_dashboard/servers/$serverId'
    | '/_dashboard/mods/'
    | '/_dashboard/servers/'
    | '/_dashboard/servers/$serverId/mods'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_dashboard"
      ]
    },
    "/_dashboard": {
      "filePath": "_dashboard.tsx",
      "children": [
        "/_dashboard/servers",
        "/_dashboard/",
        "/_dashboard/demo/dashboard",
        "/_dashboard/mods/"
      ]
    },
    "/_dashboard/servers": {
      "filePath": "_dashboard.servers.tsx",
      "parent": "/_dashboard",
      "children": [
        "/_dashboard/servers/$serverId",
        "/_dashboard/servers/"
      ]
    },
    "/_dashboard/": {
      "filePath": "_dashboard.index.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/demo/dashboard": {
      "filePath": "_dashboard.demo.dashboard.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/servers/$serverId": {
      "filePath": "_dashboard.servers.$serverId.tsx",
      "parent": "/_dashboard/servers",
      "children": [
        "/_dashboard/servers/$serverId/mods"
      ]
    },
    "/_dashboard/mods/": {
      "filePath": "_dashboard.mods.index.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/servers/": {
      "filePath": "_dashboard.servers.index.tsx",
      "parent": "/_dashboard/servers"
    },
    "/_dashboard/servers/$serverId/mods": {
      "filePath": "_dashboard.servers.$serverId.mods.tsx",
      "parent": "/_dashboard/servers/$serverId"
    }
  }
}
ROUTE_MANIFEST_END */
