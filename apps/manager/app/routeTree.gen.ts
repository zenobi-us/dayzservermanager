/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppImport } from './routes/_app'
import { Route as AppIndexImport } from './routes/_app.index'
import { Route as AppDRouteImport } from './routes/_app.d/route'
import { Route as AppDIndexImport } from './routes/_app.d/index'
import { Route as AppDServersImport } from './routes/_app.d/servers'
import { Route as AppDServersIndexImport } from './routes/_app.d/servers.index'
import { Route as AppDModsIndexImport } from './routes/_app.d/mods.index'
import { Route as AppDServersServerIdImport } from './routes/_app.d/servers.$serverId'
import { Route as AppDServersServerIdModsImport } from './routes/_app.d/servers.$serverId.mods'

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const AppDRouteRoute = AppDRouteImport.update({
  id: '/d',
  path: '/d',
  getParentRoute: () => AppRoute,
} as any)

const AppDIndexRoute = AppDIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppDRouteRoute,
} as any)

const AppDServersRoute = AppDServersImport.update({
  id: '/servers',
  path: '/servers',
  getParentRoute: () => AppDRouteRoute,
} as any)

const AppDServersIndexRoute = AppDServersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppDServersRoute,
} as any)

const AppDModsIndexRoute = AppDModsIndexImport.update({
  id: '/mods/',
  path: '/mods/',
  getParentRoute: () => AppDRouteRoute,
} as any)

const AppDServersServerIdRoute = AppDServersServerIdImport.update({
  id: '/$serverId',
  path: '/$serverId',
  getParentRoute: () => AppDServersRoute,
} as any)

const AppDServersServerIdModsRoute = AppDServersServerIdModsImport.update({
  id: '/mods',
  path: '/mods',
  getParentRoute: () => AppDServersServerIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/_app/d': {
      id: '/_app/d'
      path: '/d'
      fullPath: '/d'
      preLoaderRoute: typeof AppDRouteImport
      parentRoute: typeof AppImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/d/servers': {
      id: '/_app/d/servers'
      path: '/servers'
      fullPath: '/d/servers'
      preLoaderRoute: typeof AppDServersImport
      parentRoute: typeof AppDRouteImport
    }
    '/_app/d/': {
      id: '/_app/d/'
      path: '/'
      fullPath: '/d/'
      preLoaderRoute: typeof AppDIndexImport
      parentRoute: typeof AppDRouteImport
    }
    '/_app/d/servers/$serverId': {
      id: '/_app/d/servers/$serverId'
      path: '/$serverId'
      fullPath: '/d/servers/$serverId'
      preLoaderRoute: typeof AppDServersServerIdImport
      parentRoute: typeof AppDServersImport
    }
    '/_app/d/mods/': {
      id: '/_app/d/mods/'
      path: '/mods'
      fullPath: '/d/mods'
      preLoaderRoute: typeof AppDModsIndexImport
      parentRoute: typeof AppDRouteImport
    }
    '/_app/d/servers/': {
      id: '/_app/d/servers/'
      path: '/'
      fullPath: '/d/servers/'
      preLoaderRoute: typeof AppDServersIndexImport
      parentRoute: typeof AppDServersImport
    }
    '/_app/d/servers/$serverId/mods': {
      id: '/_app/d/servers/$serverId/mods'
      path: '/mods'
      fullPath: '/d/servers/$serverId/mods'
      preLoaderRoute: typeof AppDServersServerIdModsImport
      parentRoute: typeof AppDServersServerIdImport
    }
  }
}

// Create and export the route tree

interface AppDServersServerIdRouteChildren {
  AppDServersServerIdModsRoute: typeof AppDServersServerIdModsRoute
}

const AppDServersServerIdRouteChildren: AppDServersServerIdRouteChildren = {
  AppDServersServerIdModsRoute: AppDServersServerIdModsRoute,
}

const AppDServersServerIdRouteWithChildren =
  AppDServersServerIdRoute._addFileChildren(AppDServersServerIdRouteChildren)

interface AppDServersRouteChildren {
  AppDServersServerIdRoute: typeof AppDServersServerIdRouteWithChildren
  AppDServersIndexRoute: typeof AppDServersIndexRoute
}

const AppDServersRouteChildren: AppDServersRouteChildren = {
  AppDServersServerIdRoute: AppDServersServerIdRouteWithChildren,
  AppDServersIndexRoute: AppDServersIndexRoute,
}

const AppDServersRouteWithChildren = AppDServersRoute._addFileChildren(
  AppDServersRouteChildren,
)

interface AppDRouteRouteChildren {
  AppDServersRoute: typeof AppDServersRouteWithChildren
  AppDIndexRoute: typeof AppDIndexRoute
  AppDModsIndexRoute: typeof AppDModsIndexRoute
}

const AppDRouteRouteChildren: AppDRouteRouteChildren = {
  AppDServersRoute: AppDServersRouteWithChildren,
  AppDIndexRoute: AppDIndexRoute,
  AppDModsIndexRoute: AppDModsIndexRoute,
}

const AppDRouteRouteWithChildren = AppDRouteRoute._addFileChildren(
  AppDRouteRouteChildren,
)

interface AppRouteChildren {
  AppDRouteRoute: typeof AppDRouteRouteWithChildren
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppDRouteRoute: AppDRouteRouteWithChildren,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AppRouteWithChildren
  '/d': typeof AppDRouteRouteWithChildren
  '/': typeof AppIndexRoute
  '/d/servers': typeof AppDServersRouteWithChildren
  '/d/': typeof AppDIndexRoute
  '/d/servers/$serverId': typeof AppDServersServerIdRouteWithChildren
  '/d/mods': typeof AppDModsIndexRoute
  '/d/servers/': typeof AppDServersIndexRoute
  '/d/servers/$serverId/mods': typeof AppDServersServerIdModsRoute
}

export interface FileRoutesByTo {
  '/': typeof AppIndexRoute
  '/d': typeof AppDIndexRoute
  '/d/servers/$serverId': typeof AppDServersServerIdRouteWithChildren
  '/d/mods': typeof AppDModsIndexRoute
  '/d/servers': typeof AppDServersIndexRoute
  '/d/servers/$serverId/mods': typeof AppDServersServerIdModsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteWithChildren
  '/_app/d': typeof AppDRouteRouteWithChildren
  '/_app/': typeof AppIndexRoute
  '/_app/d/servers': typeof AppDServersRouteWithChildren
  '/_app/d/': typeof AppDIndexRoute
  '/_app/d/servers/$serverId': typeof AppDServersServerIdRouteWithChildren
  '/_app/d/mods/': typeof AppDModsIndexRoute
  '/_app/d/servers/': typeof AppDServersIndexRoute
  '/_app/d/servers/$serverId/mods': typeof AppDServersServerIdModsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/d'
    | '/'
    | '/d/servers'
    | '/d/'
    | '/d/servers/$serverId'
    | '/d/mods'
    | '/d/servers/'
    | '/d/servers/$serverId/mods'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/d'
    | '/d/servers/$serverId'
    | '/d/mods'
    | '/d/servers'
    | '/d/servers/$serverId/mods'
  id:
    | '__root__'
    | '/_app'
    | '/_app/d'
    | '/_app/'
    | '/_app/d/servers'
    | '/_app/d/'
    | '/_app/d/servers/$serverId'
    | '/_app/d/mods/'
    | '/_app/d/servers/'
    | '/_app/d/servers/$serverId/mods'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/d",
        "/_app/"
      ]
    },
    "/_app/d": {
      "filePath": "_app.d/route.tsx",
      "parent": "/_app",
      "children": [
        "/_app/d/servers",
        "/_app/d/",
        "/_app/d/mods/"
      ]
    },
    "/_app/": {
      "filePath": "_app.index.tsx",
      "parent": "/_app"
    },
    "/_app/d/servers": {
      "filePath": "_app.d/servers.tsx",
      "parent": "/_app/d",
      "children": [
        "/_app/d/servers/$serverId",
        "/_app/d/servers/"
      ]
    },
    "/_app/d/": {
      "filePath": "_app.d/index.tsx",
      "parent": "/_app/d"
    },
    "/_app/d/servers/$serverId": {
      "filePath": "_app.d/servers.$serverId.tsx",
      "parent": "/_app/d/servers",
      "children": [
        "/_app/d/servers/$serverId/mods"
      ]
    },
    "/_app/d/mods/": {
      "filePath": "_app.d/mods.index.tsx",
      "parent": "/_app/d"
    },
    "/_app/d/servers/": {
      "filePath": "_app.d/servers.index.tsx",
      "parent": "/_app/d/servers"
    },
    "/_app/d/servers/$serverId/mods": {
      "filePath": "_app.d/servers.$serverId.mods.tsx",
      "parent": "/_app/d/servers/$serverId"
    }
  }
}
ROUTE_MANIFEST_END */
