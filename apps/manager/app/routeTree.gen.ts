/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/_dashboard'
import { Route as DashboardIndexImport } from './routes/_dashboard.index'
import { Route as DashboardServersIndexImport } from './routes/_dashboard.servers.index'
import { Route as DashboardModsIndexImport } from './routes/_dashboard.mods.index'
import { Route as DashboardServersServerIdImport } from './routes/_dashboard.servers.$serverId'
import { Route as DashboardDemoDashboardImport } from './routes/_dashboard.demo.dashboard'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardServersIndexRoute = DashboardServersIndexImport.update({
  id: '/servers/',
  path: '/servers/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardModsIndexRoute = DashboardModsIndexImport.update({
  id: '/mods/',
  path: '/mods/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardServersServerIdRoute = DashboardServersServerIdImport.update({
  id: '/servers/$serverId',
  path: '/servers/$serverId',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardDemoDashboardRoute = DashboardDemoDashboardImport.update({
  id: '/demo/dashboard',
  path: '/demo/dashboard',
  getParentRoute: () => DashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/demo/dashboard': {
      id: '/_dashboard/demo/dashboard'
      path: '/demo/dashboard'
      fullPath: '/demo/dashboard'
      preLoaderRoute: typeof DashboardDemoDashboardImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/servers/$serverId': {
      id: '/_dashboard/servers/$serverId'
      path: '/servers/$serverId'
      fullPath: '/servers/$serverId'
      preLoaderRoute: typeof DashboardServersServerIdImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/mods/': {
      id: '/_dashboard/mods/'
      path: '/mods'
      fullPath: '/mods'
      preLoaderRoute: typeof DashboardModsIndexImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/servers/': {
      id: '/_dashboard/servers/'
      path: '/servers'
      fullPath: '/servers'
      preLoaderRoute: typeof DashboardServersIndexImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardDemoDashboardRoute: typeof DashboardDemoDashboardRoute
  DashboardServersServerIdRoute: typeof DashboardServersServerIdRoute
  DashboardModsIndexRoute: typeof DashboardModsIndexRoute
  DashboardServersIndexRoute: typeof DashboardServersIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardDemoDashboardRoute: DashboardDemoDashboardRoute,
  DashboardServersServerIdRoute: DashboardServersServerIdRoute,
  DashboardModsIndexRoute: DashboardModsIndexRoute,
  DashboardServersIndexRoute: DashboardServersIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof DashboardRouteWithChildren
  '/': typeof DashboardIndexRoute
  '/demo/dashboard': typeof DashboardDemoDashboardRoute
  '/servers/$serverId': typeof DashboardServersServerIdRoute
  '/mods': typeof DashboardModsIndexRoute
  '/servers': typeof DashboardServersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof DashboardIndexRoute
  '/demo/dashboard': typeof DashboardDemoDashboardRoute
  '/servers/$serverId': typeof DashboardServersServerIdRoute
  '/mods': typeof DashboardModsIndexRoute
  '/servers': typeof DashboardServersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_dashboard': typeof DashboardRouteWithChildren
  '/_dashboard/': typeof DashboardIndexRoute
  '/_dashboard/demo/dashboard': typeof DashboardDemoDashboardRoute
  '/_dashboard/servers/$serverId': typeof DashboardServersServerIdRoute
  '/_dashboard/mods/': typeof DashboardModsIndexRoute
  '/_dashboard/servers/': typeof DashboardServersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/'
    | '/demo/dashboard'
    | '/servers/$serverId'
    | '/mods'
    | '/servers'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/demo/dashboard' | '/servers/$serverId' | '/mods' | '/servers'
  id:
    | '__root__'
    | '/_dashboard'
    | '/_dashboard/'
    | '/_dashboard/demo/dashboard'
    | '/_dashboard/servers/$serverId'
    | '/_dashboard/mods/'
    | '/_dashboard/servers/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_dashboard"
      ]
    },
    "/_dashboard": {
      "filePath": "_dashboard.tsx",
      "children": [
        "/_dashboard/",
        "/_dashboard/demo/dashboard",
        "/_dashboard/servers/$serverId",
        "/_dashboard/mods/",
        "/_dashboard/servers/"
      ]
    },
    "/_dashboard/": {
      "filePath": "_dashboard.index.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/demo/dashboard": {
      "filePath": "_dashboard.demo.dashboard.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/servers/$serverId": {
      "filePath": "_dashboard.servers.$serverId.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/mods/": {
      "filePath": "_dashboard.mods.index.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/servers/": {
      "filePath": "_dashboard.servers.index.tsx",
      "parent": "/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
